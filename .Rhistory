main = "Cluster plot for the Fuzzy K-means method")
set.seed(13)
fit.hclust.f <- hcut(data_c_std, 2) # Ajustar K de acordo com o gráfico
#fit.hclust
g3.f <- cluster_viz(data_c_std, as.factor(fit.hclust.f$cluster), geom = "point",
palette= c("#00AFBB","#B266FF"),
main = "Cluster plot for the Hierarchical method")
grid.arrange(pca_fviz,g1.f, g2.f, g3.f, nrow = 2)
Y = factor(data$Target)
levels(Y) = c("Dropout","Other","Other")
pca_fviz = fviz_pca_ind(pca1,
col.ind = Y,
palette = c("#00AFBB","#B266FF"),
addEllipses = TRUE,
ellipse.type = "confidence",
legend.title = "Engine shape",
repel = TRUE
)
pca_fviz
grid.arrange(pca_fviz,g1.f, g2.f, g3.f, nrow = 2)
set.seed(13)
fit.hclust.f <- hcut(data_c_std, 2) # Ajustar K de acordo com o gráfico
#fit.hclust
g3.f <- cluster_viz(data_c_std, as.factor(fit.hclust.f$cluster), geom = "point",
palette= c("red","#B266FF"),
main = "Cluster plot for the Hierarchical method")
grid.arrange(pca_fviz,g1.f, g2.f, g3.f, nrow = 2)
set.seed(13)
fit.kmeans.f <- kmeans(data_c_std, 2) # Ajustar K de acordo com o gráfico
#fit.kmeans
g1.f <- cluster_viz(data_c_std, as.factor(fit.kmeans.f$cluster), geom = "point",
palette= c("red","#B266FF"),
main = "Cluster plot for the K-means method")
set.seed(13)
fit.cmeans.f <- cmeans(data_c_std, 2) # Ajustar K de acordo com o gráfico
#fit.cmeans
g2.f <- cluster_viz(data_c_std, as.factor(fit.cmeans.f$cluster), geom = "point",
palette= c("red","#B266FF"),
main = "Cluster plot for the Fuzzy K-means method")
set.seed(13)
fit.hclust.f <- hcut(data_c_std, 2) # Ajustar K de acordo com o gráfico
#fit.hclust
g3.f <- cluster_viz(data_c_std, as.factor(fit.hclust.f$cluster), geom = "point",
palette= c("red","#B266FF"),
main = "Cluster plot for the Hierarchical method")
grid.arrange(pca_fviz,g1.f, g2.f, g3.f, nrow = 2)
Y = factor(data$Target)
levels(Y) = c("Dropout","Other","Other")
pca_fviz = fviz_pca_ind(pca1,
col.ind = Y,
palette = c("red","#B266FF"),
addEllipses = TRUE,
ellipse.type = "confidence",
legend.title = "Engine shape",
repel = TRUE
)
pca_fviz
grid.arrange(pca_fviz,g1, g2, g3, nrow = 2)
#expand.grid(pca_fviz, g1,g2,g3)
set.seed(13)
fit.kmeans.f <- kmeans(data_c_std, 2) # Ajustar K de acordo com o gráfico
#fit.kmeans
g1.f <- cluster_viz(data_c_std, as.factor(fit.kmeans.f$cluster), geom = "point",
palette= c("red","#B266FF"),
main = "Cluster plot for the K-means method")
set.seed(13)
fit.cmeans.f <- cmeans(data_c_std, 2) # Ajustar K de acordo com o gráfico
#fit.cmeans
g2.f <- cluster_viz(data_c_std, as.factor(fit.cmeans.f$cluster), geom = "point",
palette= c("red","#B266FF"),
main = "Cluster plot for the Fuzzy K-means method")
set.seed(13)
fit.hclust.f <- hcut(data_c_std, 2) # Ajustar K de acordo com o gráfico
#fit.hclust
g3.f <- cluster_viz(data_c_std, as.factor(fit.hclust.f$cluster), geom = "point",
palette= c("red","#B266FF"),
main = "Cluster plot for the Hierarchical method")
grid.arrange(pca_fviz,g1.f, g2.f, g3.f, nrow = 2)
grid.arrange(pca_fviz,g1.f, g2.f, g3.f, nrow = 2)
c1 <- connectivity(clusters = fit.kmeans.f$cluster, Data = data_c_std)
c2 <- connectivity(clusters = fit.cmeans.f$cluster, Data = data_c_std)
c3 <- connectivity(clusters = fit.hclust.f$cluster, Data = data_c_std)
d1 <- dunn(clusters = fit.kmeans.f$cluster, Data = data_c_std)
d2 <- dunn(clusters = fit.cmeans.f$cluster, Data = data_c_std)
d3 <- dunn(clusters = fit.hclust.f$cluster, Data = data_c_std)
s.kmeans <- silhouette(fit.kmeans$cluster, dist = dist(df)^2)
s.kmeans <- silhouette(fit.kmeans.f$cluster, dist = dist(data_c_std)^2)
s.cmeans <- silhouette(fit.cmeans.f$cluster, dist = dist(data_c_std)^2)
s.hclust <- silhouette(fit.hclust.f$cluster, dist = dist(data_c_std)^2)
par(mfrow = c(2,2))
plot(s.kmeans)
plot(s.cmeans)
plot(s.hclust)
s1 <- summary(s.kmeans)$avg.width
s2 <- summary(s.cmeans)$avg.width
s3 <- summary(s.hclust)$avg.width
s1
s2
s3
d1
d2
d3
c2
c3
c1
par(mfrow = c(2,2))
plot(s.kmeans)
plot(s.cmeans)
plot(s.hclust)
s1 <- summary(s.kmeans)$avg.width
s2 <- summary(s.cmeans)$avg.width
s3 <- summary(s.hclust)$avg.width
silhouette(fit.kmeans.f$cluster, dist = dist(data_c_std)^2)
#par(mfrow = c(2,2))
#plot(s.kmeans)
#plot(s.cmeans)
#plot(s.hclust)
s1 <- summary(s.kmeans)$avg.width
s2 <- summary(s.cmeans)$avg.width
s3 <- summary(s.hclust)$avg.width
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K = ",nclust[1],")"),
paste0("Fuzzy K-means (K = ",nclust[2],")"),
paste0("Hierarchical (K = ",nclust[3],")"))
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K = ",2,")"),
paste0("Fuzzy K-means (K = ",2,")"),
paste0("Hierarchical (K = ",2,")"))
results
c1 <- connectivity(clusters = fit.kmeans.f$cluster, Data = data_c_std)
c2 <- connectivity(clusters = fit.cmeans.f$cluster, Data = data_c_std)
c3 <- connectivity(clusters = fit.hclust.f$cluster, Data = data_c_std)
= fit.cmeans.f$clu
fit.cmeans$cluster
fit.kmeans$cluster
unique(fit.kmeans$cluster)
unique(fit.cmeans$cluster)
unique(fit.kmeans$cluster);unique(fit.cmeans$cluster)
unique(fit.kmeans$cluster);unique(fit.cmeans$cluster);unique(fit.hclust$cluster)
c1.f <- connectivity(clusters = fit.kmeans.f$cluster, Data = data_c_std)
c2.f <- connectivity(clusters = fit.cmeans.f$cluster, Data = data_c_std)
c3.f <- connectivity(clusters = fit.hclust.f$cluster, Data = data_c_std)
c1.f <- connectivity(clusters = fit.kmeans.f$cluster, Data = data_c_std)
c2.f <- connectivity(clusters = fit.cmeans.f$cluster, Data = data_c_std)
c3.f <- connectivity(clusters = fit.hclust.f$cluster, Data = data_c_std)
d1 <- dunn(clusters = fit.kmeans.f$cluster, Data = data_c_std)
d2 <- dunn(clusters = fit.cmeans.f$cluster, Data = data_c_std)
d3 <- dunn(clusters = fit.hclust.f$cluster, Data = data_c_std)
d1 <- dunn(clusters = fit.kmeans$cluster, Data = data_c_std)
d2 <- dunn(clusters = fit.cmeans$cluster, Data = data_c_std)
d3 <- dunn(clusters = fit.hclust$cluster, Data = data_c_std)
d1.f <- dunn(clusters = fit.kmeans.f$cluster, Data = data_c_std)
d2.f <- dunn(clusters = fit.cmeans.f$cluster, Data = data_c_std)
d3.f <- dunn(clusters = fit.hclust.f$cluster, Data = data_c_std)
s.kmeans <- silhouette(fit.kmeans$cluster, dist = dist(data_c_std)^2)
s.cmeans <- silhouette(fit.cmeans$cluster, dist = dist(data_c_std)^2)
s.hclust <- silhouette(fit.hclust$cluster, dist = dist(data_c_std)^2)
s.kmeans <- silhouette(fit.kmeans.f$cluster, dist = dist(data_c_std)^2)
s.cmeans <- silhouette(fit.cmeans.f$cluster, dist = dist(data_c_std)^2)
s.hclust <- silhouette(fit.hclust.f$cluster, dist = dist(data_c_std)^2)
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K = ",n_clusters_silhuete[3],")"))
results
knitr::kable(results)
results.f <- matrix(c(c1.f, c2.f, c3.f, d1.f, d2.f, d3.f, s1.f, s2.f, s3.f), nrow = 3)
s.kmeans.f <- silhouette(fit.kmeans.f$cluster, dist = dist(data_c_std)^2)
s.cmeans.f <- silhouette(fit.cmeans.f$cluster, dist = dist(data_c_std)^2)
s.hclust.f <- silhouette(fit.hclust.f$cluster, dist = dist(data_c_std)^2)
s1.f <- summary(s.kmeans.f)$avg.width
s2.f <- summary(s.cmeans.f)$avg.width
s3.f <- summary(s.hclust.f)$avg.width
c1 <- connectivity(clusters = fit.kmeans$cluster, Data = data_c_std)
c2 <- connectivity(clusters = fit.cmeans$cluster, Data = data_c_std)
c3 <- connectivity(clusters = fit.hclust$cluster, Data = data_c_std)
c1.f <- connectivity(clusters = fit.kmeans.f$cluster, Data = data_c_std)
c2.f <- connectivity(clusters = fit.cmeans.f$cluster, Data = data_c_std)
c3.f <- connectivity(clusters = fit.hclust.f$cluster, Data = data_c_std)
d1 <- dunn(clusters = fit.kmeans$cluster, Data = data_c_std)
d2 <- dunn(clusters = fit.cmeans$cluster, Data = data_c_std)
d3 <- dunn(clusters = fit.hclust$cluster, Data = data_c_std)
d1.f <- dunn(clusters = fit.kmeans.f$cluster, Data = data_c_std)
d2.f <- dunn(clusters = fit.cmeans.f$cluster, Data = data_c_std)
d3.f <- dunn(clusters = fit.hclust.f$cluster, Data = data_c_std)
s.kmeans <- silhouette(fit.kmeans$cluster, dist = dist(data_c_std)^2)
s.cmeans <- silhouette(fit.cmeans$cluster, dist = dist(data_c_std)^2)
s.hclust <- silhouette(fit.hclust$cluster, dist = dist(data_c_std)^2)
s.kmeans.f <- silhouette(fit.kmeans.f$cluster, dist = dist(data_c_std)^2)
s.cmeans.f <- silhouette(fit.cmeans.f$cluster, dist = dist(data_c_std)^2)
s.hclust.f <- silhouette(fit.hclust.f$cluster, dist = dist(data_c_std)^2)
s1.f <- summary(s.kmeans.f)$avg.width
s2.f <- summary(s.cmeans.f)$avg.width
s3.f <- summary(s.hclust.f)$avg.width
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K = ",n_clusters_silhuete[3],")"))
knitr::kable(results)
results.f <- matrix(c(c1.f, c2.f, c3.f, d1.f, d2.f, d3.f, s1.f, s2.f, s3.f), nrow = 3)
colnames(results.f) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results.f) <- c(paste0("K-means (K = ",2,")"),
paste0("Fuzzy K-means (K = ",2,")"),
paste0("Hierarchical (K = ",2,")"))
knitr::kable(results.f)
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K_optim = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K_optim = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K_optim = ",n_clusters_silhuete[3],")"),)
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K = ",n_clusters_silhuete[3],")"),)
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K = ",n_clusters_silhuete[3],")"))
knitr::kable(results)
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K_optim = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K_optim = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K_optim = ",n_clusters_silhuete[3],")"))
knitr::kable(results)
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K_optim = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K_optim = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K_optim = ",n_clusters_silhuete[3],")"),
paste0("K-means (K = ",2,")"),
paste0("Fuzzy K-means (K = ",2,")"),
paste0("Hierarchical (K = ",2,")"))
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3,
c1.f, c2.f, c3.f, d1.f, d2.f, d3.f, s1.f, s2.f, s3.f), nrow = 6)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K_optim = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K_optim = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K_optim = ",n_clusters_silhuete[3],")"),
paste0("K-means (K = ",2,")"),
paste0("Fuzzy K-means (K = ",2,")"),
paste0("Hierarchical (K = ",2,")"))
knitr::kable(results)
results <- matrix(c(c1, c2, c3, d1, d2, d3, s1, s2, s3), nrow = 3)
colnames(results) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results) <- c(paste0("K-means (K_optim = ",n_clusters_silhuete[1],")"),
paste0("Fuzzy K-means (K_optim = ",n_clusters_silhuete[2],")"),
paste0("Hierarchical (K_optim = ",n_clusters_silhuete[3],")"))
knitr::kable(results)
results.f <- matrix(c(c1.f, c2.f, c3.f, d1.f, d2.f, d3.f, s1.f, s2.f, s3.f), nrow = 3)
colnames(results.f) <- c("Connectivity", "Dunn", "Silhouette")
row.names(results.f) <- c(paste0("K-means (K = ",2,")"),
paste0("Fuzzy K-means (K = ",2,")"),
paste0("Hierarchical (K = ",2,")"))
knitr::kable(results.f)
rbind(results,results.f)
knitr::kable(rbind(results,results.f))
s.kmeans <- silhouette(fit.kmeans$cluster, dist = dist(data_c_std)^2)
s.cmeans <- silhouette(fit.cmeans$cluster, dist = dist(data_c_std)^2)
s.hclust <- silhouette(fit.hclust$cluster, dist = dist(data_c_std)^2)
s1 <- summary(s.kmeans)$avg.width
s2 <- summary(s.cmeans)$avg.width
s3 <- summary(s.hclust)$avg.width
c1.f
c1
c2
c3
g1 <- sample(1:2, size=10, replace=TRUE)
g2 <- sample(1:3, size=10, replace=TRUE)
rand.index(g1, g2)
install.packages('fossil')
library(fossil)
g1 <- sample(1:2, size=10, replace=TRUE)
g2 <- sample(1:3, size=10, replace=TRUE)
rand.index(g1, g2)
g1
g2
library(fossil)
fit.kmeans.f$cluster
Y
fit.kmeans.f$cluster
Y
Y_f = Y
Y_f
fit.kmeans.f$cluster
levels(Y_f)=c(1,2)
rand.index(g1, g2)
rand.index(Y_f, fit.kmeans.f$cluster)
fit.kmeans.f$cluster
levels(fit.kmeans.f$cluster)
Y_f = as.vector(Y)
levels(Y_f)
Y_f = Y
levels(Y_f)=c(1,2)
Y_f = as.vector(Y_f)
rand.index(Y_f, fit.kmeans.f$cluster)
Y_f
Y_f = as.integer(Y_f)
Y_f
rand.index(Y_f, fit.kmeans.f$cluster)
kmeans_rand = rand.index(Y_f, fit.kmeans.f$cluster)
cmeans_rand = rand.index(Y_f, fit.cmeans.f$cluster)
hclust_rand = rand.index(Y_f, fit.hclust.f$cluster)
hclust_rand
cmeans_rand
kmeans_rand
cmeans_rand
hclust_rand
kmeans_rand
kmeans_rand = adj.rand.index(Y_f, fit.kmeans.f$cluster)
kmeans_rand
cmeans_rand = adj.rand.index(Y_f, fit.cmeans.f$cluster)
cmeans_rand
kmeans_rand = rand.index(Y_f, fit.kmeans.f$cluster)
kmeans_rand = rand.index(Y_f, fit.kmeans.f$cluster)
cmeans_rand = rand.index(Y_f, fit.cmeans.f$cluster)
hclust_rand = rand.index(Y_f, fit.hclust.f$cluster)
Y_f = Y
levels(Y_f)=c(1,2)
Y_f = as.integer(Y_f)
kmeans_rand = rand.index(Y_f, fit.kmeans.f$cluster)
cmeans_rand = rand.index(Y_f, fit.cmeans.f$cluster)
hclust_rand = rand.index(Y_f, fit.hclust.f$cluster)
rand_results = data.frame('kmeans'=kmeans_rand,
'fuzzy'=cmeans_rand,
'hierarchical'=hclust_rand)
rand_results
rand_results = data.frame('kmeans'=kmeans_rand,
'fuzzy'=cmeans_rand,
'hierarchical'=hclust_rand,row.names = 'rand')
rand_results
rand_results = t(data.frame('kmeans'=kmeans_rand,
'fuzzy'=cmeans_rand,
'hierarchical'=hclust_rand,row.names = 'rand'))
rand_results
knitr::kable(rand_results)
all_result = rbind(results,results.f)
knitr::kable(all_result )
all_result %>%
kbl() %>%
kable_paper(full_width = F) %>%
column_spec(2, #color = spec_color(),
link = "https://haozhu233.github.io/kableExtra/") %>%
column_spec(6, color = "white",
background = spec_color(mtcars$drat[1:8], end = 0.7),
popover = paste("am:", mtcars$am[1:8]))
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
head(iris[c("Species","Sepal.Length")])%>%
kable() %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "lightgrey") %>%
row_spec(c(1,6), background  = "red")
library(kableExtra)
head(iris[c("Species","Sepal.Length")])%>%
kable() %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "black") %>%
row_spec(c(1,6), background  = "green")
library(kableExtra)
head(iris[c("Species","Sepal.Length")])%>%
kable() %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "black") %>%
row_spec(c(1,6), background  = "red")
library(kableExtra)
head(iris[c("Species","Sepal.Length")])%>%
kable() %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "lightgrey") %>%
row_spec(c(1,6), background  = "red")
head(iris[c("Species","Sepal.Length")]) %>%
mutate(
Sepal.Length = cell_spec(Sepal.Length, color = ifelse(Sepal.Length > 5, "green","red"))) %>%
kable(escape = FALSE) %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "lightgrey")
library(kableExtra)
head(iris[c("Species","Sepal.Length")]) %>%
mutate(
Sepal.Length = cell_spec(Sepal.Length, color = ifelse(Sepal.Length > 5, "green","red"))) %>%
kable(escape = FALSE) %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "white")
library(kableExtra)
head(iris[c("Species","Sepal.Length")]) %>%
mutate(
Sepal.Length = cell_spec(Sepal.Length, color = ifelse(Sepal.Length > 5, "green","black"))) %>%
kable(escape = FALSE) %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "lightgrey")
library(kableExtra)
all_result %>%
mutate(
Connectivity = cell_spec(Connectivity, color = c("black","black","green","black","black","green"))) %>%
kable(escape = FALSE) %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "lightgrey")
Connectivity
rand_results = t(data.frame('kmeans'=kmeans_rand,
'fuzzy'=cmeans_rand,
'hierarchical'=hclust_rand,row.names = 'rand'))
knitr::kable(rand_results)
library(Matrix)
A <- matrix(c(2,1,6,1,1,2,3,3,6))
A
A <- matrix(c(2,1,6,1,1,2,3,3,6),3,3)
A
(A <- matrix(c(2,1,6,1,1,2,3,3,6),3,3))
y = matrix(c(5,1,0),3,1)
(y = matrix(c(5,1,0),3,1))
rankMatrix(A)
rankMatrix(A)[1]
cbind(A,y)
rankMatrix(cbind(A,y))
rankMatrix(A)[1]; rankMatrix(cbind(A,y))[1]
(A <- matrix(c(1,2,1,1,1,3,1,-2,-1,-1,-1,1),3,3))
(A <- matrix(c(1,2,1,1,1,3,1,-2,-1,-1,-1,1),4,4))
(A <- matrix(c(1,2,1,1,1,3,1,-2,-1,-1,-1,1),3,4))
(A <- matrix(c(1,2,1,1,1,3,1,-2,-1,-1,-1,1),3,4))
(y = matrix(c(2,0,4),3,1))
rankMatrix(A)[1]; rankMatrix(cbind(A,y))[1]
# Q02)
(A <- matrix(c(1,2,5,-2,1,-1),3,2))
# Q02)
(A <- matrix(c(1,2,5,-2,1,-1),3,2))
(y <- matrix(c(8,1,13),3,1))
# Consistente?
rankMatrix(A)[1]; rankMatrix(cbind(A,y))[1]
## Solucao
(x <- solve(t(A) %*% A) %*% t(A) %*% y)
x
## verificando
round(A %*% x); y
x
## verificando
round(A %*% x); y
# Q02)
(A <- matrix(c(1,2,5,-2,1,-1),3,2))
(y <- matrix(c(8,1,13),3,1))
## Consistente?
rankMatrix(A)[1]; rankMatrix(cbind(A,y))[1]
## Solucao
(x <- solve(t(A) %*% A) %*% t(A) %*% y)
## verificando
round(A %*% x); y
library(matrixcalc)
# Q03)
A = matrix(c(2,2,1,2,3,3,1,3,2),3,3)
# Q03)
(A = matrix(c(2,2,1,2,3,3,1,3,2),3,3))
is.positive.definite( A )
# Q03)
(A = matrix(c(2,2,1,2,3,3,1,3,2),3,3))
is.positive.definite( A )
######### prova
library(Matrix)
library(matrixcalc)
# Q03)
(A = matrix(c(2,2,1,2,3,3,1,3,2),3,3))
is.positive.definite( A )
is.positive.definite( matrix(c(2,-1,0,-1,2,-1,0,-1,2)) )
is.positive.definite( matrix(c(2,-1,0,-1,2,-1,0,-1,2)) )
is.positive.definite( matrix(c(2,-1,0,-1,2,-1,0,-1,2),3,3) )
is.positive.definite( A )
(A <- matrix(c(2,1,2,1,1,1,2,1,5)))
(A <- matrix(c(2,1,2,1,1,1,2,1,5),3,3))
(A <- matrix(c(2,1,2,1,1,1,2,1,5),3,3))
(A <- matrix(c(2,1,2,1,1,1,2,1,5),3,3))
is.positive.definite( A )
(A <- matrix(c(2,1,2,1,1,1,2,1,5),3,3))
is.positive.definite( A )
# B)
P <- eigen(A)$vectors
L <- diag(eigen(A)$values)
# B)
(P <- eigen(A)$vectors)
# B)
(P <- eigen(A)$vectors)
(L <- diag(eigen(A)$values))
Raiz <- P %*% sqrt(L) %*% t(P)
A; Raiz %*% Raiz
# C)
A; Raiz %*% Raiz
A == Raiz %*% Raiz
A == round(Raiz %*% Raiz)
Raiz
Raiz %*% Raiz
A == (Raiz %*% Raiz)
A == (Raiz %*% Raiz)
(A == round(Raiz %*% Raiz))
# C)
A; Raiz %*% Raiz
# Q01)
(A <- matrix(c(1,2,1,1,1,3,1,-2,-1,-1,-1,1),3,4))
(y = matrix(c(2,0,4),3,1))
rankMatrix(A)[1]; rankMatrix(cbind(A,y))[1]
# Q01)
(A <- matrix(c(1,2,1,1,1,3,1,-2,-1,-1,-1,1),3,4))
(y = matrix(c(2,0,4),3,1))
rankMatrix(A)[1]; rankMatrix(cbind(A,y))[1]
# Q03)
(A = matrix(c(2,2,1,2,3,3,1,3,2),3,3))
is.positive.definite( A )
is.positive.definite( A )
